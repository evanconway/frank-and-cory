20th of April, 2024

Time to add a planning file since I'm running into stuff I want to to think through.

Right now I'm struggling again with clickables and ensuring they don't overlap with one-another. I was having trouble figuring out how to sort through them to get the right draw and logic order. But I realized this can't be done in the same loop. An object that visually is on top of other objects must have its logic processed first, but must be drawn last. So we need a different loop for logic and drawing.

I just realized that we'll need to split up the update and draw logic of clickables. That is of course because we'll need to be able to draw them without updating them. For example, during dialog scenes.

I just added some basic dialog stuff. We should consider what functions we want in order to add more dialog. Right now I just have a simple function which takes an array of text which starts the logic. But this will have 2 different characters frequently speaking with eachother. We'll need different text bubbles, sounds, and text positions for the different characters, as well as the different scenes. It needs to be easy to declare what kind of speech the line should have when delivered. Furthermore, I think there are situations where we'll want to deliver dialog, perform some sort of small animation or event, then go back to dialog. So we need to be able to easily link dialog updateables to other updateables. For example Jude requested that the opening contain dialog between Frank and Cory which has a small light activation sequence in between lines of dialog. 

Well, right now our dialog logic creates an array of updateables that all link to eachother. What if we added a function which linked the end of a dialog sequence to another updateable? Our dialog function looks like this:

updateable_start_dialog(dialog_steps_data)

Perhaps we could add a "after_dialog_updateable" field?

updateable_start_dialog(dialog_steps_data, after_dialog_updateable=undefined)

Our dialog logic already strings each dialog updateable to the next updateable in the dialog array. So simply supplying this value to the function means we could easily string the last dialog updateable to the given value, or simply keep it undefined. As for stringing updateables to dialog, we could simply invoke the updateable_start_dialog function in the updateable.

21st of April, 2024

Something I've just realized is we have no way of executing a specific function on each dialog step with our current system. But I don't think this should be too tricky to add. The on_step() function could just be part of the step struct passed into each entry of the dialog array. The nice thing about doing it like this is we don't have to keep track of which step is doing what when deciding on_step logic.

There should be a better way to declare updateables. Right now I end up with this long callback-hell looking string of events. But it should be possible to line stuff up in an array. And have some sort of other function link them all together. But maybe we won't worry about that yet. It may only be a few spots where we have large sequences of events anyway. Ah... but I just went back to adjust one of my sequences and I got frustrated immediately. Let's work on introducting a updateable_set_linked_array function or something which does what we described above.

To link updateables together they must specifically reference one-another. And they must somehow know when they are finished. Perhaps we could just insist that updateables given to this array function have a is_finished() defined. 

Actually let's not worry about this. I changed the updateable_start_dialog function to simply return the first updateable in the chain of dialogs. And I manually set the next updateable, we just do it in reverse order. It's still fairly clearly, gives me flexibility, and doesn't require extra work. We'll do that until there seems to be more of a need.

Making progress with logic that's easy to add more steps to. I realized a way to make time based animations that don't require specifying exact step indexes. It looks like this:

{
    time: 0,
    step: 0,
    steps: [
        function() {
            // do stuff
            if (time > arbitrary_value) {
                time = 0;
                step++;
            }
        },
        function() {
            // do different stuff
            if (time > arbitrary_value) {
                time = 0;
                step++;
            }
        },
        function() {
            // do third different stuff
            if (time > arbitrary_value) {
                time = 0;
                step++;
            }
        },
    ],
    update: function() {
        time += 1;
        steps[step]();
    },
}

It might be possible to abstract this away further, but let's just keep using this for now.

I also realized we may want to rely more on global values for state than only controlling it per updateable. For example, I have an updateable that modifies the position of a sprite, and I want it to link directly to a dialog updateable that also modifies the position of that sprite. But our logic doesn't account for this gap well enough, so there is a single frame where the sprite reverts to its original position. Perhaps we could add an entire pre_clickables_logic() function to the dialog function, but that seems clunky? Actually no, let's do that instead. I like the idea of the default world staying consistent and updateables modifying it. 

Oh I see how I did it. There's an "on_step" option for individual dialog steps. But this system doesn't account for an on_step() that we want to execute for all dialog steps. Let's try adding an on_step_all() parameter to the function and see how we like that.

Ya, a on_step_all() function made the most sense. The bugs are fixed and are system is working better now. Although we don't have specifics from Jude, I think now we should start fleshing out different dialog delivery for the different characters. It doesn't even need to be correct, just different. That way it'll be easier to edit in correct fonts, sounds, positions, and whatever when we know exactly what we want.

Making a note that I think the dialog function needs to accept a parameter object. We've got too many things it needs and too many combinations of how they might exist.

We got a pretty good system going. I was looking over the code for the intro and realized how straight forward it is for linear game logic. I almost wonder if we should remove the general update function in favor of always insisting some sort of updateable be defined at any point. We could define our linear logic in scripts and name the scripts depending on what's happening in the game story.

Something that's bothering me is the typing doesn't start with character 0. Character 0 is already typed which throws off my plans for things like ellipsis. Let's see if we can dig in and make that work properly.

Fixed it. The system was not setting the time_ms for typing logic to the new time_between_types when a new typing speed was detected. Need to make sure I add this change to the TDS library.

2nd of April, 2024

Allison got us a bunch of assets, so we've been throwing those in. I changed how the desk light scene works so we're drawing a black sprite with a cutout of the lamp light. It was easier to get a shape that looked correct there. Right now I noticed that the disabled lamp asset does not block hovering over the arms behind Frank. So next let's rework the clickable object so disabled objects can still consume hover, just not act on it.


20th of May, 2024

We've been so distracted by job hunt stuff. We need to get our head back in the game for this. Last time we though about this seriously we decided the next major code challenge was the story machine. In this mini game the player will be presented with pieces of audio for a story, and the player must assemble them in the correct order. There will be 4 "chapters" to this story, and for each chapter there's going to be dialog, sound effects, and music. That's 3 pieces of audio for each chapter, so a total of 12 pieces of audio in total.

The audio pieces will be represented in game as rolls of tape on a rack. Something like this: https://www.tdiinternational.com/wp-content/uploads/2016/04/5-door-tape-reel-desiccator.jpg or maybe this: https://www.descoindustries.com/Images/Catalog/highResolution/37564.jpg

Jude has suggested having the tapes color coded based on their role (dialog, sfx, music). This may make it too easy, but we'll worry about that later. Right now we have to think through the interface to put this together. Here is my plan.

There will be a rack of audio tapes on one side (I'm imagining the left side in my head). Then there is a machine that's almost the whole screen. There should be 12 slots, 3 rows, 4 slots each row. Click and dragging a reel from the rack to one of these slots will place it in the slot. Above each column of slots there should be a play button. Hitting the play button will play all audio in just that column. Somewhere else there will be a play and stop button that controls all tapes, but from the start of the story. Originally I was thinking we'd need a complex moveable head system, and a place to listen to tapes by themselves, but this may be all we need.

Once all tapes are assembled in the correct order, Jude wants some sort of animation to play out that synchs with the player created audio. This shouldn't be too hard to do.


I was about to explain that the most difficult issue in all this is whether or not this will happen in a separate room, or in the same room. However it does not matter. We can create an object that contains all of these elements on its own. We'll simply place that object in any room it needs to be. The "object" will actually contain a bunch of sub-objects. Each of those will be buttons the player will interact with.

Let's start with creating a room we can access with a debug key where this object will exist. That way we can test it and perfect it.


25th of May, 2024

Started thinking through the story maker. So the issue is we rigged up clickables like they are individual things that are updated independantly of one-another. For the story machine, each button will do something specific. I was planning on creating one object that manages everything, but perhaps this isn't the way since I'd have to re-code so much infrastructure. I was thinking that we should actually have a script or something that creates a bunch of clickables objects all rigged to interact with one another. And probably another script that removes them.

We'll also need to create draggable elements. This is for the tape reels. I'm imagining they should snap to locations they can get slotted into, so perhaps each draggable element will need an array of targets, or positions that are valid. Not sure how I'll store these. Perhaps they should also be objects? I think the draggable elements will have to share the hover logic with the clickable elements since we don't want elements fighting with each other. We've started the habit of storing state for different parts of the game in individual scripts so we should be able to do that here as well. We can track where each tape reel is on the story machine.

Ok, I don't think I'm too worried about play and stop buttons for the audio. But I think the draggable elements that move tape reels around will be the next major engineering challenge. So let's do that next. I'm mostly concerned about positions though... should we hand code these or make them some sort of object placeable in the room? I'm tempted to make it objects so that we can hand place the exact position each thing should be at. At least for this project, since we're only dealing with tape reels, we could make the sprite for the "draggable_position" object be a tape reel, so we can be very confident where they're supposed to go. And I suppose the draggable object itself could store references to each of these position objects. We'll have a "being_dragged" state for the draggables that determines if we should start trying to snap, and we'll iterate over each of the position references to determine if we're close to any of them. That way we should be able to keep track of the actual dragged position, but also the position to draw the object to create the "snap" effect (draw it at the location of the snap object if it's close enough).

So for now, let's just start trying to create draggable elements in the debug room. Once we've got that let's re-assess.
I was going to make draggables a whole separate class from the clickables, but there's so much logic that clickables already handle which draggables need to do, like hovering, that I think we should make this a child of clickable and work around it. So ignore my previous comment, draggables are an extension of clickable.

We've added crude snapping logic, but I realized a flaw. If we want to pick up an element that's already snapped to a position object, it'll just automatically snap to that position object as soon as you click to drag it. So let's change the snapping to always be to an object rather than a position. That way we can tell the snap logic to ignore the object it's already snapped to.

Ah, and I just realized we need to make sure that draggable elements can't be placed in positions that are already occupied by another. I'm realizing this could get complicated quick, but fortunately I think the only elements which will be draggable are the tape reels. So we can probably ignore accounting for different kinds of draggable elements. Good. As for keeping track of held positions, I think this should actually be global rather than instance to instance. Because we'll need elements to know if a position is already filled. That implies positions should be aware if they're filled. But the elements must also know which element they're attached to. I don't want both positions referencing elements and elements referencing positions. We'll make it a map in the clickables script.

We have some solid logic now around dragging elements and letting them snap to new positions. We'll have to fuss with sprite origins later but I'm satisfied for now. It's time to start thinking about changing game state when moving pieces around. We can add specific information about draggable elements and positions in their object creation code. Actually, we can probably just use the raw instance values of each draggable and position to determine state values. This is about audio so we need to have audio assets matched with instance ids. But luckily the only time we actually care about that is when the player hits a play button. And when that happens we can just use a basic mapping of audio assets to instance ids. Let's start with just the play and stop button for all assets linked together. I know we've considered a test slot, and ways to play the entire string starting at different spots. But let's not worry about that now.

We finally completed a "play all" button. It will play special empty record sound when there are no reels in any rows of a column, will play all audio in a column if there are reels, and will move from column to column after finishing audio in each row. Next, I'm tempted to focus on something that indicates a column of audio is playing. It might even be worth creating the moveable head I mentioned a while ago. Let's start with getting the reels to spin.


26th of May, 2024

I've been organizing the character dialog better so it can be more easily used in different scenarios. It's time to try and start advancing the story as best as possible to get to the podcast maker (story machine?). 

Added more dialog. I realized I should change the dialog step functions for the characters. Right now I can customize what functions are called on each step. And I use that to set position. But that's silly. We should just have global variables that track the game state and determine the position of dialog boxes automatically. Let's change that next.


27th of May, 2024

Added more dialog and clickable elements. Will need to formulate more of a plan once we have more assets.


28th of May, 2024

It's going to be easier to fix Frank's eyes myself than demanding a whole new set of assets. Since the left and right eyes don't have the same spacing or angle when the head is on the desk vs attached, we'll have to draw the eyes separately. Let's modify our draw expression function to account for the different eyes, add in different values when on the table vs attached, and assess.

I've noticed something important. Certain elements should disappear when they've been disabled. But simply setting them invisible and disabling them doesn't stop them from interacting with the game world. For example, once Frank's head is on his body, the collision mask of his head sprite still affects mousing over things. We'll have to think of a way to fix this.


4th of June, 2024

Been very distracted by potential job stuff. Need to get some thoughts down before I lose track of things.

We're definitely going to have the machine descend from the ceiling. So we'll have to rig our object logic we created for draggables to be moveable. Actually, that's not necessarily hard. What's hard is figuring out what position these objects should be in. My first thought is to use a room as a place to hand place things and simply record the positions in a script which creates and moves instances. And by "record" I mean literally take screenshots with my phone then hand copy the position of each object over to a script. Tedious but it would work. But perhaps there's a better way? Maybe this should be our excuse to learn sequences in GameMaker, assuming those would even be helpful to us.

My other thought is to place the objects in a room, along with the artwork, then create code which visits this room, captures the location of everything, then uses it for the script. We'd never visit that room again. It would exist solely to for placing items artistically, then using later.

That idea feels resource wasteful in a sense, but I also kind of like it. It let's me be more creative and we could use this technique in later projects. So how would this work?

On game start, we'd have to run some sort of script that visits the room, grabs the info, then leaves. This might be something I can't think through in a txt file. I'll need to just start hacking through some GameMaker stuff to get more used to how switching rooms works.


10th of June, 2024

Coming back again. We're definitely going to have the machine slide down from the top. It occured to me we could just place everything in the room we're already using, then make a script which offsets everything. This would avoid the entire need for grabbing element locations from a different room. However regardless of how we get the objects into the room. I'm worried about updating only the clickables which are relevant to the game. Ooh, we could simply add a variable to the clickables of the story maker, and only update the clickables which have this quality. Or perhaps we could make another object type of which all story maker objects are children of, and only update those. I know we can make a special script which updates specific clickables. Let's do it that way.

Ok, let's start by revisiting the clickable objects and making them children of a special object type. Let's hand place some elements in the main room and a special layer. Then let's make a script which updates only those elements. We'll have to do some stuff with the story elements so that they're disabled by default, but enabled during story machine.

I've confused myself. We need to invoke all the logic for clickables, but only for podcast maker elements. We also need the draggable position objects, draggables, and possibly more. I need a way to easily switch between updating one set of game elements and another. I could just start making completely copies of everything but that seems unecessary.


14th of June, 2024

Had a good chat with a friend about how to handle updating a different set of clickables for the story machine. It's clear that I should definitely use a different room. But how do we handle all the items being in the correct place when the machine drops? The idea we had was to include a global mapping of items to positions. When drawing the descending machine, we'll use these global positions to determine where everything is (tape reels mostly). And in the second room we'll use these global positions to determine where everything spawns. When we transition from the workshop to the machine, we'll drop the image from above, then in a single frame switch to the actual room. So we'll have a sort of screenshot of the room we use to transition. As we update the position of tape reels and such, we can be comfident the position of items in our descending image will be the same. Now, I'm not sure we'll ever need the position of everything again, so this work may be for nothing. But I'm confident it will work.


16th of June, 2024

Let's implement a simple transition. For now we won't worry about the art assets. We'll just do a black-fade from workshop to podcast machine. Once we have a fade transition we'll work on using art, and drawing the location of all tape reels.


30th of June, 2024

Really fell off from this due to getting a job (yay). We need to link together finding the memory chip, to putting frank together, to going to the story machine. Even though we don't have a script for all of the way there yet, I think we can at least get it linked up.

Ah, but let's actually add the individual play/stop buttons in the story machine. We should also add the test area. Yes, that's the better thing to do first since work on the script events will have to be redone once Jude gets us the actual script. 

In the podcast player, I don't remember why we had the logic of locking column_to_play to -1 until playing. It looks like we used the -1 value as a trigger to let update() start the audio playing. But this doesn't work when playing a single column because the column value must be something other than -1. I think we need to trigger the audio play function manually in the play_all() or play_single() functions. And the update() function of the podcast updateable will only serve to ensure columns advance on play all, or stop when it's time to (in single play or all play mode).

That appears to be working now. Let's add the testing area.


14th of July, 2024

Working on this again. I just ran into an issue with my text system. I can't use arrows. That' kind of funny I forgot to handle that. We'll just work around it for now.

The way I did cory's sprites is wrong. He has flying sprites and position sprites mixed in with expression. Let's redo how we display him at a different location, so it's a sprite offset instead, and reimport all expressions again.

Just realized Cory's "tap" sprite could be used as an expression. It looks like he's looking down to examine something.


15th of July, 2024

Remember to put numbers on the reels. 


21st of July, 2024

So, we need to see if we can puzzle out how to handle reels changing sprite when getting picked up, and placed on specific positions. On the rack, we should see the half circle of the reels. Everywhere else they should be full reels. I'm wondering if there's a way to inform the draggable to change it's sprite when it's on specific positions.

I think it's going to be too annoying to try and make the position affect the draggable. So I'm guessing we can make the reel objects draw different sprites for themselves if they're in a slot position. I'm not sure how this affects collision detection with the mouse though.

Hmmm... the slot sprites are already perfectly positioned if we draw at 0,0. I wonder if we could make the regular object invisible instead? And just draw the slot sprite.

Perhaps we should focus on making sure our old logic links up correctly first. Right now everything is completely broken again since we removed the old instances.

I'm pretty confident we need to use slot cutouts to hide part of the reels instead of using partial images of the reels. The major reason is eventually we're going to draw text on top of the reels, and it's going to be too tricky to draw the same text on all the different sprite versions. Also, I think we're going to have too hard a time separating our mouse click detection logic from the sprites themselves. We'd have to redo how we handle clicks.

So the tricky thing here will be to draw the cutouts in the correct order relative to the clickables.

Ok, it looks like, given our current logic, we call the clickable update script before we draw. This means we can override the update function in the reel draggables to automatically set their depth based on their current position. I believe we could even use snapped position.